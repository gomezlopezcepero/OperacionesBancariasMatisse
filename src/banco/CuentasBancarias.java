/*
 * CuentasBancarias.java
 *
 * Generated with Matisse Schema Definition Language 9.1.10
 * Generation date: Wed Apr 04 13:39:47 2018
 */

// Note: the package and extends declarations are generated by mt_sdl, do not modify them

package banco;

import com.matisse.reflect.*;

/**
 * <code>CuentasBancarias</code> is a schema class generated by <code>mt_sdl</code>.
 * Any user-written classes will be found at the end of the file, after
 * the '// END of Matisse SDL Generated Code' comment.
 * Attribute types, default values, and relationship minimum and maximum
 * cardinality are stored in the database itself, not in this source code.
 * For more information, see <i>Getting Started with MATISSE</i>.
 */
public class CuentasBancarias extends com.matisse.reflect.MtObject {

    // BEGIN Matisse SDL Generated Code
    // DO NOT MODIFY UNTIL THE 'END of Matisse SDL Generated Code' MARK BELOW
    /*
     * Generated with Matisse Schema Definition Language 9.1.10
     * Generation Date: Wed Apr 04 13:39:47 2018
     */

    /*
     * Class variables and methods
     */

    /** Class <code>CuentasBancarias</code> cache ID */
    private static int CID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtClass.Loader("banco.CuentasBancarias"));

    /**
     * Gets the <code>CuentasBancarias</code> class descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a class descriptor
     */
    public static com.matisse.reflect.MtClass getClass(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtClass)db.getCachedObject(CID);
    }

    /**
     * Factory constructor. This constructor is called by <code>MtObjectFactory</code>.
     * It is public for technical reasons but is not intended to be called
     * directly by user methods.
     * @param db a database
     * @param mtOid an existing object ID in the database
     */
    public CuentasBancarias(com.matisse.MtDatabase db, int mtOid)  {
        super(db, mtOid);
    }

    /**
     * Cascaded constructor, used by subclasses to create a new object in the database.
     * It is protected for technical reasons but is not intended to be called
     * directly by user methods.
     * @param mtCls a class descriptor (the class to instantiate)
     */
    protected CuentasBancarias(com.matisse.reflect.MtClass mtCls)  {
        super(mtCls);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>instanceIterator(CuentasBancarias.class);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>instanceIterator(numObjPerBuffer, CuentasBancarias.class);
    }

    /**
     * Counts the number of instances of this class (and its subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getInstanceNumber();
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>ownInstanceIterator(CuentasBancarias.class);
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>ownInstanceIterator(numObjPerBuffer, CuentasBancarias.class);
    }

    /**
     * Counts the number of own instances of this class (excluding subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getOwnInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getOwnInstanceNumber();
    }

    /*
     * Attribute access methods
     */

    /* Attribute 'Id_CuentaBancaria' */

    /** Attribute <code>Id_CuentaBancaria</code> cache ID */
    private static int id_CuentaBancariaCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("Id_CuentaBancaria",CID));

    /**
     * Gets the <code>Id_CuentaBancaria</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getId_CuentaBancariaAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(id_CuentaBancariaCID);
    }


    /**
     * Gets the <code>Id_CuentaBancaria</code> attribute value.
     * @return the value
     *
     * @see #setId_CuentaBancaria
     * @see #removeId_CuentaBancaria
     */
    public final int getId_CuentaBancaria() {
        return getInteger(getId_CuentaBancariaAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>Id_CuentaBancaria</code> attribute value.
     * @param val the new value
     *
     * @see #getId_CuentaBancaria
     * @see #removeId_CuentaBancaria
     */
    public final void setId_CuentaBancaria(int val) {
        setInteger(getId_CuentaBancariaAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>Id_CuentaBancaria</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getId_CuentaBancaria
     * @see #setId_CuentaBancaria
     */
    public final void removeId_CuentaBancaria() {
        removeValue(getId_CuentaBancariaAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getId_CuentaBancaria
     * @see #setId_CuentaBancaria
     */
    public final boolean isId_CuentaBancariaDefaultValue() {
        return isDefaultValue(getId_CuentaBancariaAttribute(getMtDatabase()));
    }


    /* Attribute 'Numero_Cuenta' */

    /** Attribute <code>Numero_Cuenta</code> cache ID */
    private static int numero_CuentaCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("Numero_Cuenta",CID));

    /**
     * Gets the <code>Numero_Cuenta</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getNumero_CuentaAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(numero_CuentaCID);
    }


    /**
     * Gets the <code>Numero_Cuenta</code> attribute value.
     * @return the value
     *
     * @see #setNumero_Cuenta
     * @see #removeNumero_Cuenta
     */
    public final String getNumero_Cuenta() {
        return getString(getNumero_CuentaAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>Numero_Cuenta</code> attribute value.
     * @param val the new value
     *
     * @see #getNumero_Cuenta
     * @see #removeNumero_Cuenta
     */
    public final void setNumero_Cuenta(String val) {
        setString(getNumero_CuentaAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>Numero_Cuenta</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getNumero_Cuenta
     * @see #setNumero_Cuenta
     */
    public final void removeNumero_Cuenta() {
        removeValue(getNumero_CuentaAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getNumero_Cuenta
     * @see #setNumero_Cuenta
     */
    public final boolean isNumero_CuentaDefaultValue() {
        return isDefaultValue(getNumero_CuentaAttribute(getMtDatabase()));
    }


    /* Attribute 'Propietario' */

    /** Attribute <code>Propietario</code> cache ID */
    private static int propietarioCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("Propietario",CID));

    /**
     * Gets the <code>Propietario</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getPropietarioAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(propietarioCID);
    }


    /**
     * Gets the <code>Propietario</code> attribute value.
     * @return the value
     *
     * @see #setPropietario
     * @see #removePropietario
     */
    public final String getPropietario() {
        return getString(getPropietarioAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>Propietario</code> attribute value.
     * @param val the new value
     *
     * @see #getPropietario
     * @see #removePropietario
     */
    public final void setPropietario(String val) {
        setString(getPropietarioAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>Propietario</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getPropietario
     * @see #setPropietario
     */
    public final void removePropietario() {
        removeValue(getPropietarioAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getPropietario
     * @see #setPropietario
     */
    public final boolean isPropietarioDefaultValue() {
        return isDefaultValue(getPropietarioAttribute(getMtDatabase()));
    }


    /* Attribute 'DNI' */

    /** Attribute <code>DNI</code> cache ID */
    private static int dNICID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("DNI",CID));

    /**
     * Gets the <code>DNI</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getDNIAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(dNICID);
    }


    /**
     * Gets the <code>DNI</code> attribute value.
     * @return the value
     *
     * @see #setDNI
     * @see #removeDNI
     */
    public final String getDNI() {
        return getString(getDNIAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>DNI</code> attribute value.
     * @param val the new value
     *
     * @see #getDNI
     * @see #removeDNI
     */
    public final void setDNI(String val) {
        setString(getDNIAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>DNI</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getDNI
     * @see #setDNI
     */
    public final void removeDNI() {
        removeValue(getDNIAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getDNI
     * @see #setDNI
     */
    public final boolean isDNIDefaultValue() {
        return isDefaultValue(getDNIAttribute(getMtDatabase()));
    }


    /* Attribute 'Saldo' */

    /** Attribute <code>Saldo</code> cache ID */
    private static int saldoCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("Saldo",CID));

    /**
     * Gets the <code>Saldo</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getSaldoAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(saldoCID);
    }


    /**
     * Gets the <code>Saldo</code> attribute value.
     * @return the value
     *
     * @see #setSaldo
     * @see #removeSaldo
     */
    public final int getSaldo() {
        return getInteger(getSaldoAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>Saldo</code> attribute value.
     * @param val the new value
     *
     * @see #getSaldo
     * @see #removeSaldo
     */
    public final void setSaldo(int val) {
        setInteger(getSaldoAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>Saldo</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getSaldo
     * @see #setSaldo
     */
    public final void removeSaldo() {
        removeValue(getSaldoAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getSaldo
     * @see #setSaldo
     */
    public final boolean isSaldoDefaultValue() {
        return isDefaultValue(getSaldoAttribute(getMtDatabase()));
    }


    /*
     * Index access methods
     */

    /* Index 'Id_pk' */

    /** Index <code>Id_pk</code> cache ID */
    private static int id_pkIndexCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtIndex.Loader("banco.Id_pk"));

    /**
     * Gets the <code>Id_pk</code> index descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return an index descriptor object
     */
    public static com.matisse.reflect.MtIndex getId_pkIndex(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtIndex)db.getCachedObject(id_pkIndexCID);
    }

    /**
     * Finds one <code>CuentasBancarias</code> object in index <code>Id_pk</code>.
     * @param db a database
     * @param id_CuentaBancaria search parameter
     * @return the matching <code>CuentasBancarias</code> object or <code>null</code> if none was found
     */
    public static CuentasBancarias lookupId_pk(com.matisse.MtDatabase db, int id_CuentaBancaria) {
        return (CuentasBancarias)getId_pkIndex(db).lookup(new Object[] {new Integer(id_CuentaBancaria)}, getClass(db));
    }

    /**
     * Finds <code>CuentasBancarias</code> objects in index <code>Id_pk</code>.
     * @param db a database
     * @param id_CuentaBancaria search parameter
     * @return the matching <code>CuentasBancarias</code> objects or an empty array if none was found
     */
    public static CuentasBancarias[] lookupObjectsId_pk(com.matisse.MtDatabase db, int id_CuentaBancaria) {
        return (CuentasBancarias[])getId_pkIndex(db).lookupObjects(new Object[] {new Integer(id_CuentaBancaria)}, getClass(db), CuentasBancarias.class);
    }

    /**
     * Opens an iterator on index <code>Id_pk</code> for class <code>CuentasBancarias</code>.
     * Each indexed attribute has a pair of "from" and "to" parameters which
     * define the search range for that attribute.  With strings, you may use
     * <code>null</code> to start "from" at the beginning or extend "to" to the end.
     * @param <E> a MtObject class     * @param db a database
     * @param fromId_CuentaBancaria search parameter
     * @param toId_CuentaBancaria search parameter
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> id_pkIterator(com.matisse.MtDatabase db, int fromId_CuentaBancaria, int toId_CuentaBancaria) {
        return getId_pkIndex(db).<E>iterator(new Object[] {new Integer(fromId_CuentaBancaria)}, new Object[] {new Integer(toId_CuentaBancaria)}, getClass(db), com.matisse.reflect.MtIndex.DIRECT, com.matisse.MtDatabase.MAX_PREFETCHING, CuentasBancarias.class);
    }

    /**
     * Opens an iterator on index <code>Id_pk</code> for class <code>CuentasBancarias</code>. 
     * Each indexed attribute has a pair of "from" and "to" parameters which
     * define the search range for that attribute.  With strings, you may use
     * <code>null</code> to start "from" at the beginning or extend "to" to the end.
     * @param <E> a MtObject class     * @param db a database
     * @param fromId_CuentaBancaria search parameter
     * @param toId_CuentaBancaria search parameter
     * @param filterClass a subclass; use <code>null</code> not to restrict iterator to a subclass
     * @param direction MtIndex.DIRECT or MtIndex.REVERSE
     * @param numObjPerBuffer maximum number of objects to be retrieved in each request to server
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> id_pkIterator(com.matisse.MtDatabase db, int fromId_CuentaBancaria, int toId_CuentaBancaria, com.matisse.reflect.MtClass filterClass, int direction, int numObjPerBuffer) {
        return getId_pkIndex(db).iterator(new Object[] {new Integer(fromId_CuentaBancaria)}, new Object[] {new Integer(toId_CuentaBancaria)}, filterClass, direction, numObjPerBuffer, CuentasBancarias.class);
    }

    /* Index 'cuent' */

    /** Index <code>cuent</code> cache ID */
    private static int cuentIndexCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtIndex.Loader("banco.cuent"));

    /**
     * Gets the <code>cuent</code> index descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return an index descriptor object
     */
    public static com.matisse.reflect.MtIndex getCuentIndex(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtIndex)db.getCachedObject(cuentIndexCID);
    }

    /**
     * Finds one <code>CuentasBancarias</code> object in index <code>cuent</code>.
     * @param db a database
     * @param numero_Cuenta search parameter
     * @return the matching <code>CuentasBancarias</code> object or <code>null</code> if none was found
     */
    public static CuentasBancarias lookupCuent(com.matisse.MtDatabase db, String numero_Cuenta) {
        return (CuentasBancarias)getCuentIndex(db).lookup(new Object[] {numero_Cuenta}, getClass(db));
    }

    /**
     * Finds <code>CuentasBancarias</code> objects in index <code>cuent</code>.
     * @param db a database
     * @param numero_Cuenta search parameter
     * @return the matching <code>CuentasBancarias</code> objects or an empty array if none was found
     */
    public static CuentasBancarias[] lookupObjectsCuent(com.matisse.MtDatabase db, String numero_Cuenta) {
        return (CuentasBancarias[])getCuentIndex(db).lookupObjects(new Object[] {numero_Cuenta}, getClass(db), CuentasBancarias.class);
    }

    /**
     * Opens an iterator on index <code>cuent</code> for class <code>CuentasBancarias</code>.
     * Each indexed attribute has a pair of "from" and "to" parameters which
     * define the search range for that attribute.  With strings, you may use
     * <code>null</code> to start "from" at the beginning or extend "to" to the end.
     * @param <E> a MtObject class     * @param db a database
     * @param fromNumero_Cuenta search parameter
     * @param toNumero_Cuenta search parameter
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> cuentIterator(com.matisse.MtDatabase db, String fromNumero_Cuenta, String toNumero_Cuenta) {
        return getCuentIndex(db).<E>iterator(new Object[] {fromNumero_Cuenta}, new Object[] {toNumero_Cuenta}, getClass(db), com.matisse.reflect.MtIndex.DIRECT, com.matisse.MtDatabase.MAX_PREFETCHING, CuentasBancarias.class);
    }

    /**
     * Opens an iterator on index <code>cuent</code> for class <code>CuentasBancarias</code>. 
     * Each indexed attribute has a pair of "from" and "to" parameters which
     * define the search range for that attribute.  With strings, you may use
     * <code>null</code> to start "from" at the beginning or extend "to" to the end.
     * @param <E> a MtObject class     * @param db a database
     * @param fromNumero_Cuenta search parameter
     * @param toNumero_Cuenta search parameter
     * @param filterClass a subclass; use <code>null</code> not to restrict iterator to a subclass
     * @param direction MtIndex.DIRECT or MtIndex.REVERSE
     * @param numObjPerBuffer maximum number of objects to be retrieved in each request to server
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> cuentIterator(com.matisse.MtDatabase db, String fromNumero_Cuenta, String toNumero_Cuenta, com.matisse.reflect.MtClass filterClass, int direction, int numObjPerBuffer) {
        return getCuentIndex(db).iterator(new Object[] {fromNumero_Cuenta}, new Object[] {toNumero_Cuenta}, filterClass, direction, numObjPerBuffer, CuentasBancarias.class);
    }

    /* Index 'dn' */

    /** Index <code>dn</code> cache ID */
    private static int dnIndexCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtIndex.Loader("banco.dn"));

    /**
     * Gets the <code>dn</code> index descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return an index descriptor object
     */
    public static com.matisse.reflect.MtIndex getDnIndex(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtIndex)db.getCachedObject(dnIndexCID);
    }

    /**
     * Finds one <code>CuentasBancarias</code> object in index <code>dn</code>.
     * @param db a database
     * @param dNI search parameter
     * @return the matching <code>CuentasBancarias</code> object or <code>null</code> if none was found
     */
    public static CuentasBancarias lookupDn(com.matisse.MtDatabase db, String dNI) {
        return (CuentasBancarias)getDnIndex(db).lookup(new Object[] {dNI}, getClass(db));
    }

    /**
     * Finds <code>CuentasBancarias</code> objects in index <code>dn</code>.
     * @param db a database
     * @param dNI search parameter
     * @return the matching <code>CuentasBancarias</code> objects or an empty array if none was found
     */
    public static CuentasBancarias[] lookupObjectsDn(com.matisse.MtDatabase db, String dNI) {
        return (CuentasBancarias[])getDnIndex(db).lookupObjects(new Object[] {dNI}, getClass(db), CuentasBancarias.class);
    }

    /**
     * Opens an iterator on index <code>dn</code> for class <code>CuentasBancarias</code>.
     * Each indexed attribute has a pair of "from" and "to" parameters which
     * define the search range for that attribute.  With strings, you may use
     * <code>null</code> to start "from" at the beginning or extend "to" to the end.
     * @param <E> a MtObject class     * @param db a database
     * @param fromDNI search parameter
     * @param toDNI search parameter
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> dnIterator(com.matisse.MtDatabase db, String fromDNI, String toDNI) {
        return getDnIndex(db).<E>iterator(new Object[] {fromDNI}, new Object[] {toDNI}, getClass(db), com.matisse.reflect.MtIndex.DIRECT, com.matisse.MtDatabase.MAX_PREFETCHING, CuentasBancarias.class);
    }

    /**
     * Opens an iterator on index <code>dn</code> for class <code>CuentasBancarias</code>. 
     * Each indexed attribute has a pair of "from" and "to" parameters which
     * define the search range for that attribute.  With strings, you may use
     * <code>null</code> to start "from" at the beginning or extend "to" to the end.
     * @param <E> a MtObject class     * @param db a database
     * @param fromDNI search parameter
     * @param toDNI search parameter
     * @param filterClass a subclass; use <code>null</code> not to restrict iterator to a subclass
     * @param direction MtIndex.DIRECT or MtIndex.REVERSE
     * @param numObjPerBuffer maximum number of objects to be retrieved in each request to server
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> dnIterator(com.matisse.MtDatabase db, String fromDNI, String toDNI, com.matisse.reflect.MtClass filterClass, int direction, int numObjPerBuffer) {
        return getDnIndex(db).iterator(new Object[] {fromDNI}, new Object[] {toDNI}, filterClass, direction, numObjPerBuffer, CuentasBancarias.class);
    }

    // END of Matisse SDL Generated Code

    /*
     * You may add your own code here...
     */

    /**
     * Default constructor provided as an example.
     * You may delete this constructor or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @param db a database
     */
    public CuentasBancarias(com.matisse.MtDatabase db) {
        super(getClass(db));
    }

    /**
     * Example of <code>toString</code> method.
     * You may delete this method or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @return a string
     */
    public java.lang.String toString() {
        return super.toString() + "[CuentasBancarias]";
    }
}
